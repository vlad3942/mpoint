<?php
/**
 * The Callback Package provide methods for informing the Client of the Transaction status automatically.
 * Callbacks can be performed either using mPoint's own Callback protocol or the PSP's native protocol.
 *
 * Created by IntelliJ IDEA.
 * User: Sagar Narayane
 * Copyright: Cellpoint Mobile
 * Link: http://www.cellpointmobile.com
 * Project: mPoint
 * Package:
 * File Name: mvault.php
 */

/* ==================== mVault Exception Classes Start ==================== */
/**
 * Super class for all mVault Exceptions
 */
class MVaultException extends CallbackException { }
/* ==================== mVault Exception Classes End ==================== */

/**
 * Model Class containing all the Business Logic for the Payment Service Provider: mVault
 *
 */

class MVault extends CPMPSP
{
    public function capture($iAmount=-1) { throw new MVaultException("Method: capture is not supported by mVault"); }
    public function refund($iAmount=-1) { throw new MVaultException("Method: refund is not supported by mVault"); }
    public function void($iAmount=-1) { throw new MVaultException("Method: void is not supported by mVault"); }
    public function cancel() { throw new MVaultException("Method: cancel is not supported by mVault"); }
    public function status() { throw new MVaultException("Method: status is not supported by mVault"); }

    public function getPSPID() { return Constants::iMVAULT_PSP; }

    public function getPaymentData(PSPConfig $obj_PSPConfig, SimpleXMLElement $obj_Card, $mode = Constants::sPAYMENT_DATA_FULL)
    {
        if(isset( $obj_Card->token) === false) {
            $typeId = $obj_Card["id"];
            $ticket = $this->getTicket($typeId);
            if ($ticket !== NULL)
                $obj_Card->token = $ticket;
        }
        return parent::getPaymentData($obj_PSPConfig, $obj_Card, $mode); // TODO: Change the autogenerated stub
    }

    public function saveCard($obj_Card)
    {
        $xml = ' <root>' ;
        $xml .='<save-card-request>';
        $xml .='<client-id>'.$this->getTxnInfo()->getClientConfig()->getID().'</client-id>';
        $xml .='<external-id>'.$this->getTxnInfo()->getID().'</external-id>';
        if(count($obj_Card->{'card-holder-name'}) > 0)
        {
            $xml .='<card-holder-name>'.$obj_Card->{'card-holder-name'}.'</card-holder-name>';
        }
        $xml .='<card-pan>'.$obj_Card->{'card-number'}.'</card-pan>';
        $xml .='<expiry>'.$obj_Card->expiry.'</expiry>';
        if(count($obj_Card->{'valid-from'}) > 0)
        {
           $xml .='<valid_from>'.$obj_Card->{'valid-from'}.'</valid_from>';
        }
        $xml .= '<enabled>true</enabled>';
        $xml .= '</save-card-request>';
        $xml .= '</root>';

        try
        {
            $aCI = $this->aCONN_INFO;
            $aURLInfo = parse_url($this->getClientConfig()->getMESBURL() );
            $obj_ConnInfo = new HTTPConnInfo($aCI["protocol"], $aURLInfo["host"], $aCI["port"], $aCI["timeout"], $aCI["paths"]["save-card"], $aCI["method"], $aCI["mvault-contenttype"], $this->getClientConfig()->getUsername(), $this->getClientConfig()->getPassword() );

            $obj_HTTP = new HTTPClient(new Template(), $obj_ConnInfo);
            $obj_HTTP->connect();
            $code = $obj_HTTP->send($this->constHTTPHeaders(), $xml);
            $obj_HTTP->disConnect();

            if ($code == 200 || $code == 201)
            {
                $obj_XML = simplexml_load_string($obj_HTTP->getReplyBody() );
                if (isset($obj_XML->{'save-card-response'}))
                {
                    $token = $obj_XML->{'save-card-response'}->token;
                    $sql = "UPDATE Log" . sSCHEMA_POSTFIX . ".Transaction_Tbl
						SET token = '" . $token . "'
						WHERE id = " . $this->getTxnInfo()->getID();
                    $this->getDBConn()->query($sql);
                }
            }
        }
        catch (mPointException $e)
        {
            trigger_error("Error while saving card details from mVault " . $this->getTxnInfo()->getID() . " failed with code: " . $e->getCode() . " and message: " . $e->getMessage(), E_USER_ERROR);

        }
        catch (Exception $e)
        {
            trigger_error("Unknown while saving card details from mVault " . $this->getTxnInfo()->getID() . " failed with code: " . $e->getCode() . " and message: " . $e->getMessage(), E_USER_ERROR);
        }
        return $code;
    }

    public function getCardDetails()
    {
        $sToken = $this->getTxnInfo()->getToken();
        if(empty($sToken) === true ){ return null;}

        $xml = '<root>';
        $xml .= '<get-card-details-request>';
        $xml .='<client-id>'.$this->getTxnInfo()->getClientConfig()->getID().'</client-id>';
        $xml .='<token>'.$sToken.'</token>';
        $xml .='<external-id>'.$this->getTxnInfo()->getID().'</external-id>';
        $xml .='</get-card-details-request>';
        $xml .='</root>';
        try
        {
            $aCI = $this->aCONN_INFO;
            $aURLInfo = parse_url($this->getClientConfig()->getMESBURL() );
            $obj_ConnInfo = new HTTPConnInfo($aCI["protocol"], $aURLInfo["host"], $aCI["port"], $aCI["timeout"], $aCI["paths"]["get-card-details"], $aCI["method"], $aCI["mvault-contenttype"], $this->getClientConfig()->getUsername(), $this->getClientConfig()->getPassword() );

            $obj_HTTP = new HTTPClient(new Template(), $obj_ConnInfo);
            $obj_HTTP->connect();
            $code = $obj_HTTP->send($this->constHTTPHeaders(), $xml);
            $obj_HTTP->disConnect();

            if ($code == 200 || $code == 201)
            {
                $obj_XML = simplexml_load_string($obj_HTTP->getReplyBody() );
                if (isset($obj_XML->{'get-card-details-response'}) === true)
                {
                    $response = '<card type-id="' . $this->getTxnInfo()->getCardID() . '">';
                    $response .= '<card-holder-name>'.$obj_XML->{'get-card-details-response'}->{'card-holder-name'}.'</card-holder-name>';
                    $response .= '<card-number>'.$obj_XML->{'get-card-details-response'}->{'card-pan'}.'</card-number>';
                    $response .= '<expiry>'.$obj_XML->{'get-card-details-response'}->{'expiry'}.'</expiry>';
                    if($this->getTxnInfo()->getShippingAddr() !== null)
                    {
                        $aShippingAddress = $this->getTxnInfo()->getShippingAddr();
                        $response .= '<address country-id="' . $aShippingAddress['country'] . '">';
                        $response .= '<full-name>'.$aShippingAddress['name'].'</full-name>';
                        $response .= '<street>'.$aShippingAddress['street'].'</street>';
                        $response .= '<street2>'.$aShippingAddress['street2'].'</street2>';
                        $response .= '<postal-code>'.$aShippingAddress['zip'].'</postal-code>';
                        $response .= '<city>'.$aShippingAddress['city'].'</city>';
                        $response .= '<state>'.$aShippingAddress['state'].'</state>';
                        $response .= '</address>';
                    }

                    $response .= '</card>';
                    return simplexml_load_string($response );
                }
               return null;
            }
        }
        catch (mPointException $e)
        {
            trigger_error("Error while getting card details from mVault " . $this->getTxnInfo()->getID() . " failed with code: " . $e->getCode() . " and message: " . $e->getMessage(), E_USER_ERROR);
        }
        catch (Exception $e)
        {
            trigger_error("Unknown while getting card details from mVault " . $this->getTxnInfo()->getID() . " failed with code: " . $e->getCode() . " and message: " . $e->getMessage(), E_USER_ERROR);
        }
        return null;
    }
}