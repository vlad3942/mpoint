<?php
require_once __DIR__ . '/../../webroot/inc/include.php';
require_once __DIR__ . '/../inc/testinclude.php';
require_once __DIR__ . '/../../api/classes/general.php';
require_once __DIR__ . '/../../api/interfaces/cpm_psp.php';

class GenerateReceiptTest extends baseAPITest
{
    protected int $pspId;
    private $_obj_TXT;
    private GeneralPSP $_obj_PSP;
    private TxnInfo $_obj_txnInfo;
    private RDB $_obj_DB;
    private SimpleXMLElement $_simpleXMLElement;

    public function setUp($isDBSetupRequired = TRUE): void
    {
        parent::setUp($isDBSetupRequired); // TODO: Change the autogenerated stub
        $this->_simpleXMLElement = new SimpleXMLElement('<?xml version="1.0" encoding="UTF-8"?><root></root>');
    }

    private function setupData($param = []): void
    {
        global $aMPOINT_CONN_INFO;

        $aMPOINT_CONN_INFO["paths"]["generate-receipt"] =  "/_test/simulators/safetypay/generate-receipt.php";
        $couponGenerate = isset($param["couponGenerate"]) && $param["couponGenerate"] != "true" ? "false" : "true";
        $bucketName = @$param["bucketName"];
        $pspID = @$param["pspID"];

        $this->queryDB("INSERT INTO Client.Client_Tbl (id, flowid, countryid, name, username, passwd) VALUES (10099, 1, 100, 'Test Client', 'Tusername', 'Tpassword')");
        $this->queryDB("INSERT INTO Client.URL_Tbl (clientid, urltypeid, url) VALUES (10099, 4, 'http://mpoint.local.cellpointmobile.com/')");
        $this->queryDB("INSERT INTO Client.Account_Tbl (id, clientid) VALUES (1100, 10099)");
        $this->queryDB("INSERT INTO Client.Keyword_Tbl (id, clientid, name, standard) VALUES (1, 10099, 'CPM', true)");
        $this->queryDB("INSERT INTO Client.MerchantAccount_Tbl (id, clientid, pspid, name) VALUES (1, 10099, " . $pspID . ", '1')");
        $this->queryDB("INSERT INTO Client.MerchantSubAccount_Tbl (accountid, pspid, name) VALUES (1100, $pspID, '-1')");

        $this->queryDB("INSERT INTO client.additionalproperty_tbl ( key, value, externalid, type, enabled, scope) VALUES ('COUPON_GEN', '".$couponGenerate."',(SELECT ID FROM client.merchantaccount_tbl WHERE clientid = 10099 and pspid = $pspID) ,'merchant', true, 1)");
        $this->queryDB("INSERT INTO client.additionalproperty_tbl ( key, value, externalid, type, enabled, scope) VALUES ('COUPON_BUCKET_NAME', '".$bucketName."',(SELECT ID FROM client.merchantaccount_tbl WHERE clientid = 10099 and pspid = $pspID) ,'merchant', true, 1)");

        $this->queryDB("INSERT INTO Client.CardAccess_Tbl (clientid, cardid, pspid) VALUES (10099, 8, $pspID)");
        $this->queryDB("INSERT INTO log.session_tbl (id, clientid, accountid, currencyid, countryid, stateid, orderid, amount, mobile, deviceid, ipaddress, externalid, sessiontypeid) VALUES (1, 10099, 1100, 208, 100, 4030, '900-55150298', 5000, 9876543210, '', '127.0.0.1', -1, 1);");
        $this->queryDB("INSERT INTO Log.Transaction_Tbl (id, orderid, typeid, clientid, accountid, countryid, pspid, callbackurl, amount, ip, enabled, keywordid, sessionid,convertedamount) VALUES (1001001, '900-55150298', 100, 10099, 1100, 100, $pspID, '', 5000, '127.0.0.1', TRUE, 1, 1,5000)");
        $this->queryDB("INSERT INTO Log.Transaction_Tbl (id, orderid, typeid, clientid, accountid, countryid, pspid, callbackurl, amount, ip, enabled, keywordid, sessionid,convertedamount) VALUES (1001002, '900-55150298', 100, 10099, 1100, 100, $pspID, '', 5000, '127.0.0.1', TRUE, 1, 1,5000)");

        $this->queryDB("INSERT INTO Log.Message_Tbl (txnid, stateid) VALUES (1001001, ". Constants::iPAYMENT_ACCEPTED_STATE. ")");

        $this->_obj_DB = RDB::produceDatabase($this->mPointDBInfo);
        $this->_obj_txnInfo = TxnInfo::produceInfo(1001001, $this->_obj_DB);

        $this->_obj_TXT = new TranslateText([sLANGUAGE_PATH . sLANG . "/global.txt", sLANGUAGE_PATH . sLANG . "/custom.txt"], sSYSTEM_PATH, 0, "UTF-8");
        $this->_obj_PSP = new GeneralPSP($this->_obj_DB, $this->_obj_TXT, $this->_obj_txnInfo, $aMPOINT_CONN_INFO, NULL, NULL);
    }

    public function testSafetyPayGenerateReceiptSuccess()
    {
        $param["couponGenerate"] = "true";
        $param["bucketName"] = "test-client-bucket-name";
        $param["pspID"] = Constants::iSAFETYPAY_AGGREGATOR;
        
        $this->setupData($param);
		$this->assertTrue($this->_obj_PSP->generate_receipt());
    }

    public function testSafetyPayGenerateReceiptNoCoponFlag()
    {
        $param["bucketName"] = "test-client-bucket-name";
        $param["pspID"] = Constants::iSAFETYPAY_AGGREGATOR;
        
        $this->setupData($param);
		$this->assertTrue($this->_obj_PSP->generate_receipt());
    }

    public function testSafetyPayGenerateReceiptNoBucket()
    {
        $param["couponGenerate"] = "true";
        $param["pspID"] = Constants::iSAFETYPAY_AGGREGATOR;
        
        $this->setupData($param);
		$this->assertTrue($this->_obj_PSP->generate_receipt());
    }
}